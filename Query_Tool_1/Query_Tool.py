# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QueryTool
                                 A QGIS plugin
 The plugin is use to make query on shapefile
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-08-16
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Previan 
        email                : jjtakodjou@pavemetrics.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Query_Tool_dialog import QueryToolDialog
import os.path
from qgis.core import *
from qgis.PyQt.QtCore import QVariant


class QueryTool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QueryTool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Query Tool')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QueryTool', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Query_Tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Query Tool on shapefile'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Query Tool'),
                action)
            self.iface.removeToolBarIcon(action)
    def loadLayers(self):
        fn = self.dlg.lineEdit_saveQ.text()
        if os.path.exists(fn):
            self.iface.addVectorLayer(fn, '', 'ogr')
        else:
            self.iface.messageBar().pushMessage("File does not exist", fn, level=0)

    def loadLayersW(self):
        self.fnw = self.dlg.lineEdit_analyseW.text()
        if os.path.exists(self.fnw):
            self.iface.addVectorLayer(self.fnw, '', 'ogr')
        else:
            self.iface.messageBar().pushMessage("File does not exist", self.fnw, level=0)
            
    def getFieldsNameListW(self):
        liste = []
        self.layerw = QgsVectorLayer(self.fnw, '', 'ogr')
        self.layerw = self.iface.activeLayer()
        for field in self.layerw.fields():
            liste.append(field.name())
        #print(liste)
        return liste
    # -- Rendu a ce niveau : wrapped C/C++ object of type QgsVectorDataProvider has been deleted
    def addFieldsW(self):
       
        if len(self.getFieldsNameListW()) >= 9:
            
            caps = self.layerw.dataProvider().capabilities()
            if caps & QgsVectorDataProvider.DeleteFeatures:
                
                res = self.layerw.dataProvider().deleteFeatures([9, len(self.getFieldsNameListW())])
                self.layerw.updateFields()
        else:
          
            caps = self.layerw.dataProvider().capabilities()
            if caps & QgsVectorDataProvider.AddAttributes:
    
                res = self.layerw.dataProvider().addAttributes([QgsField("fid", QVariant.Int)])
            self.layerw.updateFields()
            
    def addFeatureFidFieldw(self):
        self.layerw.startEditing()
        for feat in self.layerw.getFeatures():
            feat["fid"] = feat.id()
            self.layerw.updateFeature(feat)

        self.layerw.commitChanges()
        
    def selectConcrete2W(self, layer):
        self.selection = layer.selectByExpression('"TieMateria"=\'concrete\' and "Rating"=2')
    
            
    def selectWood3W(self, layer):
        self.selection = layer.selectByExpression('"TieMateria"=\'wood\' and "Rating"=3',
                                                       QgsVectorLayer.SelectBehavior.AddToSelection)

    def extractListValueFromFIDw(self, layer):
        layer_selection = layer.selectedFeatures()
        liste = []
        for feat in layer_selection:
            liste.append(feat['fid'])
        liste.sort()
        #print(len(liste))
        return liste
    
    def find_clusters_v2w(self):
        arr = self.extractListValueFromFIDw(self.layerw)
        clusters = {}
        ibeg = 0  # beginning of current checked range
        iend = 0  # end of current checked range
        inext = 1  # next item to check
        while iend < len(arr):
            if inext == len(arr) or arr[inext] - arr[iend] != 1:
                # Distance between values is too large or we reached the end,
                # add cluster if larger than 1 (we need 2 to have a cluster)
                dst = iend - ibeg + 1
                if dst > 1:
                    if not dst in clusters:
                        clusters[dst] = []

                    clusters[dst].append(arr[ibeg])

                ibeg = inext
                iend = ibeg

            iend = inext
            inext = iend + 1
        # print(dict(sorted(clusters.items())))
        return dict(sorted(clusters.items()))
    
    def sectionsFromClustersw(self):
        clusters = self.find_clusters_v2w()
        count = self.dlg.spinBox_NumberOfTies_2.value()
        vec = []
        for key, value in clusters.items():
            if key < count:
                pass
            else:
                for element in value:
                    i = 0
                    while i < key:
                        vec.append(element + i)
                        i += 1
        #print(len(vec))
        return vec
    
    def selectConsecutiveValueW(self):
        liste = self.sectionsFromClustersw()
        for i in range(0, len(liste)):
            if i == 0:
                self.selection = self.layerw.selectByExpression('"fid" = {}'.format(liste[i]))
            else:
                self.selection = self.layerw.selectByExpression('"fid" = {}'.format(liste[i]),
                                                               QgsVectorLayer.SelectBehavior.AddToSelection)
    def writeShapefileW(self):
        self.fnwO = self.dlg.lineEdit_saveW.text()
        writer = QgsVectorFileWriter.writeAsVectorFormat(self.layerw, self.fnwO, 'utf-8', driverName='ESRI Shapefile',
                                                         onlySelected=True)

    def loadLayersWo(self):
        #fn = self.dlg.lineEdit_saveW.text()
        if os.path.exists(self.fnwO):
            self.iface.addVectorLayer(self.fnwO, '', 'ogr')
        else:
            self.iface.messageBar().pushMessage("File does not exist", self.fnwO, level=0)
    
        

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = QueryToolDialog()

    
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
        # Do something useful here - delete the line containing pass and
        # substitute with your code.
        
            
        
            if self.dlg.tabWidget.currentIndex() == 0:
                
                self.dlg.getFieldsNameList()
                self.dlg.addFields()
                self.dlg.addFeatureFidField()
                # self.dlg.addFieldToLayer()
                # self.dlg.deleteFieldToLayer()
                
                if self.dlg.checkBox_concrete2.isChecked():
                   self.dlg.selectConcrete2()
                if self.dlg.checkBox_concrete2.isChecked() == False:
                   self.dlg.layer.removeSelection()
                #self.dlg.andIsChecked() # Rendu au niveau de la selection
                if self.dlg.checkBox_or.isChecked():
                   self.dlg.selectWood3()
                self.dlg.extractListValueFromFID()
                self.dlg.find_clusters_v2()
                
                if self.dlg.spinBox_NumberOfTies.value() <= max(self.dlg.find_clusters_v2()):
                    self.iface.messageBar().pushMessage("Le nombre maximun consecutifs de clusters est de : " + str(max(self.dlg.find_clusters_v2())), level=0, duration = 5)
                    self.dlg.sectionsFromClusters()
                    self.dlg.selectConsecutiveValue()
                    self.dlg.writeShapefile()
                    self.loadLayers()
                    
                # if the number of consecutives in the spinbox is upper than the max of consecutives ties
                else:
                    self.iface.messageBar().pushMessage("Il y'a pas " + str(self.dlg.spinBox_NumberOfTies.value()) + \
                        " clusters dans ce shapefile. Veuillez entrer un nombre inferieur ou egale a " + str(max(self.dlg.find_clusters_v2())), level=2, duration = 10)
                
                self.dlg.layer.removeSelection()  
              
            
            # Second Tab widgets 
            else:
                self.loadLayersW()
                self.getFieldsNameListW()
                self.addFieldsW()
                self.addFeatureFidFieldw()
                
                if self.dlg.checkBox_concrete2W.isChecked():
                   self.selectConcrete2W(self.layerw)
                if self.dlg.checkBox_concrete2W.isChecked() == False:
                   self.layerw.removeSelection()
                #self.dlg.andIsChecked() # Rendu au niveau de la selection
                if self.dlg.checkBox_orW.isChecked():
                   self.selectWood3W(self.layerw)
                self.extractListValueFromFIDw(self.layerw)
                self.find_clusters_v2w()
                
                if self.dlg.spinBox_NumberOfTies_2.value() <= max(self.find_clusters_v2w()):
                    self.iface.messageBar().pushMessage("Le nombre maximun consecutifs de clusters est de : " + str(max(self.find_clusters_v2w())), level=0, duration = 5)
                    self.sectionsFromClustersw()
                    self.selectConsecutiveValueW()
                    self.writeShapefileW()
                    self.loadLayersWo()
                else:
                    self.iface.messageBar().pushMessage("Il y'a pas " + str(self.dlg.spinBox_NumberOfTiesW.value()) + \
                        " clusters dans ce shapefile. Veuillez entrer un nombre inferieur ou egale a " + str(max(self.find_clusters_v2w())), level=2, duration = 10)
                
                self.layerw.removeSelection()  
                

            pass
